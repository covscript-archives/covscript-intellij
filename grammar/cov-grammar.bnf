{
  parserClass='org.covscript.lang.CovParser'
  extends='com.intellij.extapi.psi.ASTWrapperPsiElement'
  psiClassPrefix='Cov'
  psiImplClassSuffix='Impl'
  psiPackage='org.covscript.lang.psi'
  psiImplPackage='org.covscript.lang.psi.impl'

  extends('.*Lit|.*Expr|.*Op')=expr

  tokenTypeClass='org.covscript.lang.CovTokenType'
  elementTypeHolderClass='org.covscript.lang.psi.CovTypes'
  elementTypeClass='org.covscript.lang.CovElementType'
  psiImplUtilClass='org.covscript.lang.psi.impl.CovPsiImplUtils'
}

file ::=
 fileHeader*
 statement*

fileHeader ::=
   usingDeclaration
 | importDeclaration
 | packageDeclaration
 | comment
 | endOfLine

private endOfLine ::= EOL+
break ::= BREAK_KEYWORD
continue ::= CONTINUE_KEYWORD
comment ::= LINE_COMMENT {
	mixin='org.covscript.lang.psi.impl.CovCommentMixin'
	implements=['com.intellij.psi.PsiLanguageInjectionHost' 'com.intellij.psi.PsiComment']
}

importDeclaration ::= IMPORT_KEYWORD symbol
usingDeclaration ::= USING_KEYWORD symbol
packageDeclaration ::= PACKAGE_KEYWORD symbol

variableDeclaration ::= (CONST_KEYWORD)? VAR_KEYWORD symbol EQ expr {
	mixin='org.covscript.lang.psi.impl.CovVariableDeclarationMixin'
}

functionDeclaration ::=
 FUNCTION_KEYWORD symbol LEFT_BRACKET (symbol (COMMA symbol)*)? RIGHT_BRACKET endOfLine
  bodyOfSomething
 END_KEYWORD {
	mixin='org.covscript.lang.psi.impl.CovFunctionDeclarationMixin'
	implements=['com.intellij.psi.PsiNameIdentifierOwner']
}

namespaceDeclaration ::=
 NAMESPACE_KEYWORD symbol endOfLine
  bodyOfSomething
 END_KEYWORD {
	mixin='org.covscript.lang.psi.impl.CovNamespaceDeclarationMixin'
}

structDeclaration ::=
 STRUCT_KEYWORD symbol endOfLine
  ((variableDeclaration | functionDeclaration) endOfLine)*
 END_KEYWORD

bodyOfSomething ::= (statement endOfLine)* {
	mixin='org.covscript.lang.psi.impl.CovBodyOfSomethingMixin'
}

returnStatement ::= RETURN_KEYWORD expr?
throwStatement ::= THROW_KEYWORD expr

tryCatchStatement ::=
 TRY_KEYWORD endOfLine
  bodyOfSomething
 CATCH_KEYWORD symbol endOfLine
  bodyOfSomething
 END_KEYWORD {
	mixin='org.covscript.lang.psi.impl.CovTryCatchDeclarationMixin'
}

ifStatement ::=
 IF_KEYWORD expr endOfLine
  bodyOfSomething
  (
   ELSE_KEYWORD endOfLine
    bodyOfSomething
  )?
 END_KEYWORD

switchStatement ::=
 SWITCH_KEYWORD expr endOfLine
  (
   (CASE_KEYWORD expr | DEFAULT_KEYWORD) endOfLine
    bodyOfSomething
   END_KEYWORD endOfLine
  )*
 END_KEYWORD

whileStatement ::=
 WHILE_KEYWORD expr endOfLine
  bodyOfSomething
 END_KEYWORD

loopUntilStatement ::=
 LOOP_KEYWORD endOfLine
  bodyOfSomething
 (UNTIL_KEYWORD expr endOfLine)?
 END_KEYWORD

forStatement ::=
 FOR_KEYWORD symbol (forTo | forIterate) endOfLine
  bodyOfSomething
 END_KEYWORD {
	mixin='org.covscript.lang.psi.impl.CovForStatementMixin'
}

forTo ::= EQ expr TO_KEYWORD expr (STEP_KEYWORD expr)?
forIterate ::= ITERATE_KEYWORD expr

blockStatement ::=
 BLOCK_KEYWORD endOfLine
  bodyOfSomething
 END_KEYWORD

statement ::=
   primaryStatement
 | collapsedStatement {
  mixin='org.covscript.lang.psi.impl.CovStatementMixin'
  implements=['org.covscript.lang.psi.impl.ICovStatement']
}

collapsedStatement ::= COLLAPSER_BEGIN primaryStatement? COLLAPSER_END

private primaryStatement ::=
   endOfLine
 | importDeclaration
 | throwStatement
 | returnStatement
 | variableDeclaration
 | functionDeclaration
 | structDeclaration
 | ifStatement
 | whileStatement
 | switchStatement
 | blockStatement
 | forStatement
 | loopUntilStatement
 | tryCatchStatement
 | comment
 | namespaceDeclaration
 | break
 | continue
 | expr

expr ::=
   level12
 | level14
 | level15
 | unaryLevelOp
 | primaryExpr {
	mixin='org.covscript.lang.psi.impl.CovExprMixin'
	implements=['org.covscript.lang.psi.impl.ICovExpr']
}

private level15 ::=
   functionLit
 | memberAccess

private level14 ::=
   newExpr
 | typeidExpr

newExpr ::= (NEW_KEYWORD | GCNEW_KEYWORD) expr
typeidExpr ::= TYPEID_KEYWORD expr

memberAccess ::= expr DOT expr { extends=expr }
functionLit ::=
 LEFT_S_BRACKET RIGHT_S_BRACKET
 LEFT_BRACKET
 (
  symbol
  (COMMA symbol)*
 )?
 RIGHT_BRACKET ARROW
  expr

unaryLevelOp ::= unaryOperator expr
unaryOperator ::=
   INC_OP
 | DEC_OP
 | MINUS_OP
 | PLUS_OP
 | NOT_OP
 | NOT_KEYWORD
 | TIMES_OP

binaryOperator ::=
   EQ
 | DIV_ASS
 | PLUS_ASS
 | MINUS_ASS
 | TIMES_ASS
 | POW_ASS
 | REM_ASS
 | QUESTION_OP
 | PLUS_OP
 | MINUS_OP
 | TIMES_OP
 | DIV_OP
 | REM_OP
 | POW_OP
 | COLON_OP
 | AND_OP
 | AND_KEYWORD
 | OR_OP
 | OR_KEYWORD
 | LT_OP
 | GT_OP
 | EQ_OP
 | LE_OP
 | GE_OP
 | UN_OP

private primaryExpr ::=
   symbol
 | number
 | boolean
 | null
 | string
 | charLit
 | arrayLit
 | bracketExpr

bracketExpr ::= LEFT_BRACKET expr RIGHT_BRACKET
boolean ::= TRUE_KEYWORD | FALSE_KEYWORD { extends=expr }
arrayLit ::= LEFT_B_BRACKET (expr (COMMA expr)*)? RIGHT_B_BRACKET
number ::= NUM { extends=expr }
null ::= NULL_KEYWORD { extends=expr }
string ::= STR { extends=expr }
charLit ::= CHAR
symbol ::= SYM {
	mixin='org.covscript.lang.psi.impl.CovSymbolMixin'
	implements=['org.covscript.lang.psi.impl.ICovSymbol']
	extends=expr
}


